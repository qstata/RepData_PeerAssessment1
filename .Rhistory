library(swirl)
swirl()
all <- lm(Fertility, data=swiss)
all <- lm(Fertility~., data=swiss)
summary(all)
lm(Fertility~Agriculture, data=Swiss)
lm(Fertility~Agriculture, data=swiss)
summary(lm(Fertility~Agriculture, data=swiss))
cor(swiss$Fertility, swiss$Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic.
ec <- swiss$Examination+swiss$Catholic.
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
coef(efit) - coef(all)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(1:2, function(n) is.factor(InsectSprays[,n]))
sapply(InsectSprays,class)
fut <- lm(count~spray, InsectSprays)
fit <- lm(count~spray, InsectSprays)
summary(fit)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
help(hunger)
colnames(hunger)
names(hunger)
fit <- lm(Numeric ~ Year)
fit <- lm(Numeric ~ Year, hunger)
fit$coefficients
summary(fit)$coef
fit <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female",])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female",])
lmF
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmF
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
library(swirl)
swirl()
fit <- lm(y~x, out2)
plot(fit, which==1)
plot(fit, which=1)
fit <- lm(y~x, out2[-1,])
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sum(resid(fit)^2)/df)
sigma <- sqrt(sum((fit)^2))
infor()
info()
sigma <- 1
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
rstudent(fit)[1]
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
md1 <- lm(Infant.Mortality~. swiss)
md1 <- lm(Infant.Mortality~., swiss)
mdl <- lm(Infant.Mortality~. swiss)
mdl <- lm(Infant.Mortality~., swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- 1
swirl()
mdl2 <- lm(Fertility ~ ., swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
md1 <- <- glm(visits ~ date, poisson, hits)
md1 <- glm(visits ~ date, poisson, hits)
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- log(visits+1)
md2 <- glm(visits ~ date, poisson, hits,  offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
q()
setwd("d:\\RepData_PeerAssessment1")
setwd("d:\\git\\RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
head(activity)
tail(activity)
summary(activity)
total.steps <- tapply(activity$steps, activity$date, FUN=sum)
total.steps
total.steps <- tapply(activity$steps, activity$date, FUN=sum(na.rm = TRUE))
total.steps <- tapply(activity$steps, activity$date, FUN=sum, na.rm = TRUE)
total.steps
hist(total.steps)
total.steps <- tapply(activity$steps, activity$date, FUN=sum)
hist(total.steps)
round(mean(total.steps, na.rm = TRUE), 1)
round(mean(total.steps, na.rm = TRUE), 0)
interval.steps <- tapply(activity$steps, activity$interval, FUN=mean, na.rm=TRUE)
head(interval.steps)
interval.steps <- tapply(activity$steps, activity$interval, FUN=mean)
head(interval.steps)
interval.steps <- tapply(activity$steps, activity$interval, FUN=mean, na.rm=TRUE)
max(interval.steps)
which(max(interval.steps))
which(interval.steps =max(interval.steps))
which(interval.steps == max(interval.steps))
names(which(interval.steps == max(interval.steps)))
names(summary(activity))
t1 = summary(activity)
names(t1)
dim(t1)
t1[1,1]
t1[6,1]
t1[7,1]
length(is.na(activity$steps))
length(activity$steps)
sum(is.na(activity$steps))
the total number of missing values in the dataset
median.steps <- tapply(activity$steps, activity$date, FUN=median)
head(median.steps)
tail(median.steps)
median.steps <- tapply(activity$steps, activity$date, FUN=median, na.rm=TRUE)
head(median.steps)
median.steps <- sapply(activity$steps, activity$date, FUN=median, na.rm=TRUE)
median.steps <- tapply(activity$steps, activity$date, FUN=median, na.rm=TRUE)
head(median.steps)
median.steps <- tapply(activity$steps, activity$date, FUN=mean, na.rm=TRUE)
head(median.steps)
tail(median.steps)
median.steps <- tapply(activity$steps, activity$interval, FUN=mean, na.rm=TRUE)
tail(median.steps)
head(median.steps)
median.steps <- tapply(activity$steps, activity$interval, FUN=median(), na.rm=TRUE)
median.steps <- tapply(activity$steps, activity$interval, FUN=median, na.rm=TRUE)
head(median.steps)
median.steps <- tapply(activity$steps, activity$interval, FUN=mean, na.rm=TRUE)
median.steps["20"]
median.steps[activity[1,3]]
median.steps[paste(activity[1,3])]
nrow(activity)
activity$date[1]
as.date(activity$date[1])
date(activity$date[1])
as.Date(activity$date[1])
